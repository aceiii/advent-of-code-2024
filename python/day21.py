#!/usr/bin/env python3

import sys


NUMPAD_MAP = {
    ('A', '0'): ['<A'],
    ('A', '1'): ['^<<A'],
    ('A', '2'): ['^<A', '<^A'],
    ('A', '3'): ['^A'],
    ('A', '4'): ['^^<<A'],
    ('A', '5'): ['^^<A','<^^A'],
    ('A', '6'): ['^^A'],
    ('A', '7'): ['^^^<<A'],
    ('A', '8'): ['^^^<A', '<^^^A'],
    ('A', '9'): ['^^^A'],
    ('A', 'A'): ['A'],

    ('0', '0'): ['A'],
    ('0', '1'): ['^<A'],
    ('0', '2'): ['^A'],
    ('0', '3'): ['^>A', '>^A'],
    ('0', '4'): ['^^<A'],
    ('0', '5'): ['^^A'],
    ('0', '6'): ['^^>A', '>^^A'],
    ('0', '7'): ['^^^<A'],
    ('0', '8'): ['^^^A'],
    ('0', '9'): ['^^^>A', '>^^^A'],
    ('0', 'A'): ['>A'],

    ('1', '0'): ['>vA'],
    ('1', '1'): ['A'],
    ('1', '2'): ['>A'],
    ('1', '3'): ['>>A'],
    ('1', '4'): ['^A'],
    ('1', '5'): ['^>A', '>^A'],
    ('1', '6'): ['^>>A', '>>^A'],
    ('1', '7'): ['^^A'],
    ('1', '8'): ['^^>A', '>^^A'],
    ('1', '9'): ['^^>>A', '>>^^A'],
    ('1', 'A'): ['>>vA'],

    ('2', '0'): ['vA'],
    ('2', '1'): ['<A'],
    ('2', '2'): ['A'],
    ('2', '3'): ['>A'],
    ('2', '4'): ['^<A', '<^A'],
    ('2', '5'): ['^A'],
    ('2', '6'): ['^>A', '>^A'],
    ('2', '7'): ['^^<A', '<^^A'],
    ('2', '8'): ['^^A'],
    ('2', '9'): ['^^>A', '>^^A'],
    ('2', 'A'): ['>vA', '^vA'],

    ('3', '0'): ['v<A', '<vA'],
    ('3', '1'): ['<<A'],
    ('3', '2'): ['<A'],
    ('3', '3'): ['A'],
    ('3', '4'): ['^<<A', '<<^A'],
    ('3', '5'): ['^<A', '<^A'],
    ('3', '6'): ['^A'],
    ('3', '7'): ['^^<<A', '<<^^A'],
    ('3', '8'): ['^^<A', '<^^A'],
    ('3', '9'): ['^^A'],
    ('3', 'A'): ['vA'],

    ('4', '0'): ['>vvA'],
    ('4', '1'): ['vA'],
    ('4', '2'): ['>vA', 'v>A'],
    ('4', '3'): ['>>vA', 'v>>A'],
    ('4', '4'): ['A'],
    ('4', '5'): ['>A'],
    ('4', '6'): ['>>A'],
    ('4', '7'): ['^A'],
    ('4', '8'): ['^>A', '>^A'],
    ('4', '9'): ['^>>A', '>>^A'],
    ('4', 'A'): ['>>vvA'],

    ('5', '0'): ['vvA'],
    ('5', '1'): ['v<A', '<vA'],
    ('5', '2'): ['vA'],
    ('5', '3'): ['v>A', '>vA'],
    ('5', '4'): ['<A'],
    ('5', '5'): ['A'],
    ('5', '6'): ['>A'],
    ('5', '7'): ['^<A', '<^A'],
    ('5', '8'): ['^A'],
    ('5', '9'): ['^>A', '>^A'],
    ('5', 'A'): ['>vvA', 'vv>A'],

    ('6', '0'): ['vv<A', '<vvA'],
    ('6', '1'): ['v<<A', '<<vA'],
    ('6', '2'): ['v<A', '<vA'],
    ('6', '3'): ['vA'],
    ('6', '4'): ['<<A'],
    ('6', '5'): ['<A'],
    ('6', '6'): ['A'],
    ('6', '7'): ['^<<A', '<<^A'],
    ('6', '8'): ['^<A', '<^A'],
    ('6', '9'): ['^A'],
    ('6', 'A'): ['vvA'],

    ('7', '0'): ['>vvvA'],
    ('7', '1'): ['vvA'],
    ('7', '2'): ['>vvA', 'vv>A'],
    ('7', '3'): ['>>vvA', 'vv>>A'],
    ('7', '4'): ['vA'],
    ('7', '5'): ['>vA', 'v>A'],
    ('7', '6'): ['>>vA', 'v>>A'],
    ('7', '7'): ['A'],
    ('7', '8'): ['>A'],
    ('7', '9'): ['>>A'],
    ('7', 'A'): ['>>vvvA'],

    ('8', '0'): ['vvvA'],
    ('8', '1'): ['vv<A', '<vvA'],
    ('8', '2'): ['vvA'],
    ('8', '3'): ['>vvA', 'vv>A'],
    ('8', '4'): ['v<A', '<vA'],
    ('8', '5'): ['vA'],
    ('8', '6'): ['>vA', 'v>A'],
    ('8', '7'): ['<A'],
    ('8', '8'): ['A'],
    ('8', '9'): ['>A'],
    ('8', 'A'): ['>vvvA', 'vvv>A'],

    ('9', '0'): ['vvv<A', '<vvvA'],
    ('9', '1'): ['vv<<A', '<<vvA'],
    ('9', '2'): ['vv<A', '<vvA'],
    ('9', '3'): ['vvA'],
    ('9', '4'): ['v<<A', '<<vA'],
    ('9', '5'): ['v<A', '<vA'],
    ('9', '6'): ['vA'],
    ('9', '7'): ['<<A'],
    ('9', '8'): ['<A'],
    ('9', '9'): ['A'],
    ('9', 'A'): ['vvvA'],
}


DIRPAD_MAP = {
    ('A', '^'): ['<A'],
    ('A', '<'): ['v<<A'],
    ('A', 'v'): ['v<A', '<vA'],
    ('A', '>'): ['vA'],
    ('A', 'A'): ['A'],

    ('^', '^'): ['A'],
    ('^', '<'): ['v<A'],
    ('^', 'v'): ['vA'],
    ('^', '>'): ['>vA', 'v>A'],
    ('^', 'A'): ['>A'],

    ('<', '^'): ['>^A'],
    ('<', '<'): ['A'],
    ('<', 'v'): ['>A'],
    ('<', '>'): ['>>A'],
    ('<', 'A'): ['>>^A'],

    ('v', '^'): ['^A'],
    ('v', '<'): ['<A'],
    ('v', 'v'): ['A'],
    ('v', '>'): ['>A'],
    ('v', 'A'): ['>^A','^>A'],

    ('>', '^'): ['^<A', '<^A'],
    ('>', '<'): ['<<A'],
    ('>', 'v'): ['<A'],
    ('>', '>'): ['A'],
    ('>', 'A'): ['^A'],
}


def parse_input(c):
    try:
        return int(c, 10)
    except:
        return c


def parse_codes(lines):
    codes = []
    for line in lines:
        codes.append((line, int(line[:3], 10)))
    return codes


def transform_code(code, keymap):
    results = []
    prev_c = "A"
    for c in code:
        results.append(keymap[(prev_c, c)][0])
        prev_c = c
    return "".join(results)


def transform_code2(code, keymaps, n=0):
    if n >= len(keymaps):
        return code

    results = []
    prev_c = "A"
    for c in code:
        res = keymaps[n][(prev_c, c)]
        transformed = sorted([transform_code2(r, keymaps, n+1) for r in res], key=lambda x: len(x))
        results.append(transformed[0])
        prev_c = c

    return "".join(results)


def part1(lines):
    codes = parse_codes(lines)
    complexity = 0
    for code, num in codes:
        res = transform_code2(code, [NUMPAD_MAP, DIRPAD_MAP, DIRPAD_MAP])
        complexity += len(res) * num
    return complexity


def part2(lines):
    pass


def main():
    lines = sys.stdin.read().strip().split("\n")
    print("Part1: {}".format(part1(lines)))
    print("Part2: {}".format(part2(lines)))


if __name__ == "__main__":
    main()

